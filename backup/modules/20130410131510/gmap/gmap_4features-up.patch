{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0   // @@@ TODO: Some sort of bounds handling for deletemarker? We'd have to walk the whole thing to figure out the new bounds...\
 \});\
Index: js/gmap.js\
===================================================================\
RCS file: /cvs/drupal-contrib/contributions/modules/gmap/js/gmap.js,v\
retrieving revision 1.16\
diff -u -r1.16 gmap.js\
--- js/gmap.js	1 Dec 2009 19:47:53 -0000	1.16\
+++ js/gmap.js	10 Jan 2010 06:46:05 -0000\
@@ -300,6 +300,9 @@\
     if (obj.vars.behavior.overview) \{\
       map.addControl(new GOverviewMapControl());\
     \}\
+    if (obj.vars.behavior.googlebar) \{\
+        map.enableGoogleBar();\
+      \}    \
     if (obj.vars.behavior.scale) \{\
       map.addControl(new GScaleControl());\
     \}\
Index: js/highlight.js\
===================================================================\
RCS file: js/highlight.js\
diff -N js/highlight.js\
--- /dev/null	1 Jan 1970 00:00:00 -0000\
+++ js/highlight.js	1 Jan 1970 00:00:00 -0000\
@@ -0,0 +1,51 @@\
+/* $Id: highlight.js,v 1.0 2009/05/09 19:12:12 srobert72 Exp $ */\
+\
+/**\
+ * @file\
+ * Common marker highlighting routines.\
+ */\
+\
+/*global $, Drupal */\
+\
+/**\
+ * Highlights marker on rollover.\
+ * Removes highlight on previous marker.\
+ *\
+ * Creates a "circle" using 20-sided GPolygon at the given point\
+ * Circle polygon object is global variable as there is only one highlighted marker at a time\
+ * and we want to remove the previously placed polygon before placing a new one.\
+ * \
+ * Original code "Google Maps JavaScript API Example"\
+ */\
+var highlightCircle;\
+highlightCurrentMarker = function (map, currentMarker) \{\
+  var markerPoint = currentMarker.marker.getPoint();\
+\
+  var polyPoints = Array();\
+\
+  if (highlightCircle) \{\
+    map.removeOverlay(highlightCircle);\
+  \}\
+\
+  var mapNormalProj = G_NORMAL_MAP.getProjection();\
+  var mapZoom = map.getZoom();\
+  var clickedPixel = mapNormalProj.fromLatLngToPixel(markerPoint, mapZoom);\
+\
+  var polySmallRadius = 20;\
+\
+  var polyNumSides = 20;\
+  var polySideLength = 18;\
+\
+  for (var a = 0; a<(polyNumSides+1); a++) \{\
+    var aRad = polySideLength*a*(Math.PI/180);\
+    var polyRadius = polySmallRadius; \
+	var pixelX = clickedPixel.x + polyRadius * Math.cos(aRad);\
+    var pixelY = clickedPixel.y + polyRadius * Math.sin(aRad);\
+    var polyPixel = new GPoint(pixelX,pixelY);\
+    var polyPoint = mapNormalProj.fromPixelToLatLng(polyPixel,mapZoom);\
+    polyPoints.push(polyPoint);\
+  \}\
+  // Using GPolygon(points,  strokeColor?,  strokeWeight?,  strokeOpacity?,  fillColor?,  fillOpacity?)\
+  highlightCircle = new GPolygon(polyPoints,"#000000",2,0.0,"#FF0000",.5);\
+  map.addOverlay(highlightCircle);\
+\};\
\\ No newline at end of file}