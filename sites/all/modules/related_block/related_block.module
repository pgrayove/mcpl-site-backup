<?php

/**
 * Implementation of hook_theme().
 */
function related_block_theme() {
  return array(
    'related_block_block' => array(
      'file' => 'related_block.module',
      'arguments' => array(
        'node' => NULL,
        'nodes' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_block().
 *
 * Generates a block with links for the current node.
 */
function related_block_block($op = 'list', $delta = 0, $edit = array()) {
  global $language;
  $node_types = node_get_types('names');
  $related_types = variable_get('related_block_types', $node_types);
  $show_types = variable_get('related_block_show_types', $node_types);

  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Related Block');
      return $blocks;
    case 'view':
      if ((arg(0) == 'node') && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        if (array_key_exists($node->type, $related_types)) {
          // Here's where we generate the similar articles

          $lang = isset($node->language) ? $node->language : $language->language;
          $nodes = _related_block_search( $node->title, $node->body, $node->nid, array_keys($show_types), $lang );

          if (!empty($nodes)) {
            $block['subject'] = t('Related Nodes');
            $block['content'] = theme('related_block_block', $node, $nodes );
            return $block;
          }
        }
      }
      break;
    case 'configure':
      $form['related_block_types'] = array(
        '#type'          => 'checkboxes',
        '#title'         => t('Display On'),
        '#default_value' => array_keys($related_types),
        '#options'       => $node_types,
        '#description'   => t('Display the related block only on nodes of these types.'),
      );

      $form['related_block_show_types'] = array(
        '#type'          => 'checkboxes',
        '#title'         => t('Show related node types'),
        '#default_value' => array_keys($show_types),
        '#options'       => $node_types,
        '#description'   => t('Limit the nodes should be displayed in the related block to only these content types.')
      );

      $form['related_block_count'] = array(
        '#type'          => 'textfield',
        '#title'         => t('Node Count'),
        '#size'          => 6,
        '#default_value' => variable_get('related_block_count', 10),
        '#description'   => t('Number of similar nodes to show.')
      );

      $form['related_block_topkeywords'] = array(
        '#type' 	=> 'select',
	'#title'	=> t('Number of keywords to search for related nodes'),
	'#options'	=> array('1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9),
	'#default_value' => variable_get('related_block_topkeywords', 3),
	'#description' 	=> t('When stripping keywords from a given node, how many should be considered when searching for related nodes?'),
      );

      return $form;
    case 'save':
      $save_types = array();
      foreach (array_filter(array_values($edit['related_block_types'])) as $key) {
        $save_types[$key] = $node_types[$key];
      }
      variable_set('related_block_types', $save_types);
      $save_types = array();
      foreach (array_filter(array_values($edit['related_block_show_types'])) as $key) {
        $save_types[$key] = $node_types[$key];
      }
      variable_set('related_block_show_types', $save_types);

      $count = $edit['related_block_count'];
      if (is_numeric($count)) {
        variable_set('related_block_count', $count);
      }
      
      variable_set('related_block_topkeywords', $edit['related_block_topkeywords']);
      break;
  }
}

function theme_related_block_block( $node, $nodes ) {
  $output = "<div class='similar-block'>";
  $done = false;
  foreach ($nodes as $key => $n) {
    if ($done) {
      $output .= "<div class='seperator'></div>";
    }

    $node = node_load($n->sid);
    $output .= "<div class='similar-block-{$n->sid}'>";
    $output .= l($node->title, "node/$node->nid");
    $output .= "</div>";

    $done = true;
  }
  $output .= "</div>";

  return $output;
}

function _related_block_check($string) {
  $pattern = '/[^\w\d]+/ ';
  $output = preg_replace($pattern, '-', utf8_encode($string));
  return $output;
}

function _related_block_search($title, $body, $ignore = 0, $show_types = array(), $lang) {
  global $language;
  $nodes = array(); # The array of related nodes to return to the caller

  /* Take a weighted sampling of words from in the title and body */
  /* Title words add 5, body words only 2 */
  /* then take the top 3 words and search for those */
  if (function_exists('do_search')) {
    $words = array();

    // Extract title keywords (weight 5)
    $tw = _related_block_strip($title, $lang);
    foreach ($tw as $w => $count) {
      if (!is_numeric($w)) { $words[$w] += 5 * $count; }
    }

    // Extract body keywords (weight 2)
    $bw = _related_block_strip($body, $lang);
    foreach ($bw as $w => $count) {
      if (!is_numeric($w)) { $words[$w] += 2 * $count; }
    }
    if (isset($words[''])) { unset($words['']); }

    // Multisort the array of words, descending by weight
    array_multisort( $words, SORT_DESC );

    // Take the N highest words, and construct search keywords based on the top words
    $top_count = variable_get('related_block_topkeywords', 3); 
    $word_keys = array_keys($words); 
    $max_words = min($top_count, count($word_keys));
    for ($i = 0; $i < $max_words; $i++) {
      $search_key .= $word_keys[$i] . ' ';
    }

    // Couldn't find any useful keywords? Quit and go home.
    if (!trim($search_key)) { return array(); }

    // Construct a WHERE clause for the selected content types
    $show_types_where = '(';
    for ($i = 0 ; $i < count($show_types) ; $i++) {
      $show_types_where .= "'$show_types[$i]'";
      if ($i < count($show_types)-1) { $show_types_where .= ","; }
    }
    $show_types_where .= ')';
    
    // Check whether i18n is installed and enabled
    if (module_exists("i18n")) { // i18n is installed and enabled
     
      // Respect i18n.module's content selection modes
      // Selection Mode Options are: simple, mixed, default, strict, off
      $i18n_mode = variable_get('i18n_selection_mode', 'simple');
      $lang_default = language_default();

      switch ($i18n_mode) {
        case 'simple': //  simple = current + neutral
          $lang_clause = sprintf('(n.language = "%s" OR n.language = "")', $language->language);
          break;
        case 'mixed': //  mixed = current->default->neutral
          $lang_clause = sprintf('(n.language = "%s" OR n.language = "%s" OR n.language = "")', $language->language, $lang_default->language);
          break;
        case 'default': //  default = default + neutral
          $lang_clause = sprintf('(n.language = "%s" OR n.language = "")', $lang_default->language);
          break;
        case 'strict': //  strict = only current
          $lang_clause = sprintf('(n.language = "%s")', $language->language);
          break;
        case 'off': //  off = all content
          $lang_clause = '1=1';
      }
      $nodes = do_search($search_key, 'node', 'LEFT JOIN {node} n ON n.nid=i.sid', 'i.sid != '.$ignore.' AND n.status = 1 AND ' . $lang_clause . ' AND n.type IN ' . $show_types_where);
    } else {
      // If no i18n, global $language var is always set, so select content based on that
      $nodes = do_search($search_key, 'node', 'LEFT JOIN {node} n ON n.nid=i.sid', 'i.sid != '.$ignore.' AND n.status = 1 AND n.language = "'.$language->language.'" AND n.type IN ' . $show_types_where);
    }
  }

  // Return a slice of the $nodes array consisting of the exact number of nodes requested
  return array_slice($nodes, 0, variable_get('related_block_count', 10), TRUE);
}

function _related_block_strip($text, $lang) {
  // First decode the text as utf8
  $text = html_entity_decode($text, ENT_QUOTES, "UTF-8");

  // strip all punctuation
  $wordlist = preg_split('/\s*[\s+\.|\?|,|(|)|\-+|\'|\"|=|;|&#0215;|\$|\/|:|{|}]\s*/i', strip_tags($text));
  $a = array_count_values( array_filter($wordlist) ); # Remove empty "words" and count the rest

  // Remove the stop words from the list.
  $stopwords = _related_block_stopwords($lang); # This can now be localized..
  if (isset($stopwords)) {
    foreach ($stopwords as $word) {
      unset($a[$word]);
    }
  }

  // make sure everything is in lower case and gather word counts
  foreach ($a as $word => $count) {
    $w = strtolower($word);
    if (isset($b[$w])) {
      $b[$w] += $count;
    }
    else {
      $b[$w] = $count;
    }
  }

  return $b;
}

function _related_block_stopwords($lang) {
  global $language;

  $path = drupal_get_path('module', 'related_block') .'/stopwords/';
  $file = $path . ($language->language ? $language->language : 'en') . '.inc';

  // get the locale file
  if (is_file($file)) { require($file); }
  elseif (is_file($path . 'en.inc')) { require($path . 'en.inc'); }
  
  return $words;
}
