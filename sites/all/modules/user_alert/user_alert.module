<?php // $Id$

/**
 * Implements hook_init()
 *
 * Set a cookie to track this user.
 */

function user_alert_init() {	
	if (!isset($_COOKIE['UUID']) || !_user_alert_uuid_is_valid($_COOKIE['UUID'])) {
		$uuid = _user_alert_uuid_generate_php();
		setcookie('UUID', $uuid, time() + 31536000, '/');
	}
	
	drupal_add_js(array('user_alert' => array('url_prefix' => variable_get('clean_url', 0) != 0 ? '' : '?q=')), 'setting');
}

/**
 * Implements hook_menu()
 */

function user_alert_menu() {
  $items = array();

  $items['admin/settings/user-alert'] = array(
    'title' => 'User Alert',
		'description' => 'Configuration options for User Alert.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
		'page arguments' => array('user_alert_admin_settings'),
    'access arguments' => array('administer user alert'),
		'file' => 'user_alert.admin.inc',
  );
  $items['admin/settings/user-alert/list'] = array(
    'title' => 'User Alert',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer user alert'),
  	'weight' => -15,
  );
  
  $items['admin/user-alert/close-message'] = array(
    'page callback' => 'user_alert_close_message',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_perm()
 */

function user_alert_perm() {
	return array('administer user alert', 'create user alert', 'edit any user alert', 'edit own user alert', 'delete any user alert', 'delete own user alert');
}

/**
 * Implements hook_access().
 */

function user_alert_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      if (user_access('create user alert', $account)) {
        return TRUE;
      }
      break;

    case 'update':
      if (user_access('edit any user alert', $account) || ($account->uid == $node->uid && user_access('edit own user alert', $account))) {
        return TRUE;
      }
      break;

    case 'delete':
      if (user_access('delete any user alert', $account) || ($account->uid == $node->uid && user_access('delete own user alert', $account))) {
        return TRUE;
      }
      break;
  }
}

/**
 * Implements hook_block()
 */

function user_alert_block($op = 'list', $delta = 0, $edit = array()) {
	switch ($op) {
    case 'list':
		$block['user_alert']['info'] = t('User Alert');
		$block['user_alert']['title'] = t('<none>');
		$block['user_alert']['subject'] = t('<none>');
		$block['user_alert']['content'] = t('');
		$block['user_alert']['visibility'] = 0;
		$block['user_alert']['custom'] = FALSE;
		$block['user_alert']['body_field'] = '';
		$block['user_alert']['cache'] = BLOCK_NO_CACHE;
		break;
    case 'view':
      switch ($delta) {
        case 'user_alert':
			$block['subject'] = '<none>';
			$block['title'] = '<none>';
			$block['content'] = user_alert_display_alert();
			break;
	  }
	}
	return $block;
}

/**
 * Implements hook_node_info().
 */

function user_alert_node_info() {
  return array(
    'user_alert' => array(
      'name' => t('User Alert'),
      'module' => 'user_alert',
      'description' => t('A User Alert is a short Twitter like message displayed at the top of the site, similar to CNN Breaking News.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'has_body' => TRUE,
      'body_label' => t('Alert Message'),
    )
  );
}

/**
 * Implements hook_nodeapi()
 * 
 * Unpublish other alerts when a new one is created, or updated to published.
 */

function user_alert_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	switch ($op) {
		case 'insert':
		case 'update':
			if ($node->type == 'user_alert') {
				$result = db_query('SELECT nid, status FROM {node} WHERE type = "%s" AND nid != %d', 'user_alert', $node->nid);
					while ($row = db_fetch_object($result)) {
						db_query('UPDATE {node} SET status = %d WHERE status = %d AND nid = %d', 0, 1, $row->nid);
					}
				}
			break;
		default:
			break;
	}
}

/**
 * Implements hook_form().
 */

function user_alert_form(&$node, $form_state) { 
  $type = node_get_types('type', $node);

  if ($type->has_title) {
  	$form['title'] = array(
  		'#type' => 'textfield',
        '#title' => check_plain($type->title_label),
        '#required' => TRUE,
        '#default_value' => $node->title,
        '#weight' => -25,
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
    $form['body_field']['body']['#rows'] = 5;
    $form['body_field']['body']['#description'] = 'Enter a short alert message to present to the user.';
  }

  return $form;
}

/**
 * Check to see if the user has closed this message
 *
 * @return
 *   Returns themed output if there is a message to display.
 */

function user_alert_display_alert() {
	// look at the action alert table
	// determine if the user has seen the alert, and clicked to hide it
	
	$result = db_fetch_object(db_query('SELECT * FROM {node} WHERE type = "%s" AND status = %d ORDER BY nid DESC LIMIT 1', 'user_alert', 1));
		
	if ($result) {
	
		$alert = node_load($result->nid);
				
		$message_status = db_fetch_object(db_query('SELECT * FROM {user_alert} WHERE nid = %d AND uuid = "%s"', $alert->nid, $_COOKIE['UUID']));
		
		// user has not closed or seen this message, proceed
		if (!$message_status) {	
			drupal_add_css(drupal_get_path('module', 'user_alert') .'/css/user-alert.css', 'module', 'all', TRUE);
			drupal_add_js(drupal_get_path('module', 'user_alert') .'/js/user-alert.js', 'module', 'header', FALSE, FALSE, TRUE);
	
			$output = theme('user_alert', $alert);
			return $output;
		}
	}
}
 
/**
 * Respond to a user clicking to close an alert.
 */

function user_alert_close_message() {
		
	$result = db_fetch_object(db_query('SELECT * FROM {node} WHERE type = "%s" AND status = %d ORDER BY nid DESC LIMIT 1', 'user_alert', 1));
		
	if ($result) {
		$message_status = db_fetch_object(db_query('SELECT * FROM {user_alert} WHERE nid = %d AND uuid = "%s"', $result->nid, $_COOKIE['UUID']));
		
		// user has not closed or seen this message, proceed
		if (!$message_status) {
			db_query('INSERT INTO {user_alert} (nid, uuid) VALUES (%d, "%s")', $result->nid, $_COOKIE['UUID']);
		}
	}
}

/**
 * Implements hook_theme()
 */

function user_alert_theme() {
  return array(
    'user_alert' => array(
      'template' => 'user-alert',
      'arguments' => array('node' => null),
    ),
  );
}

/**
 * Implements hook_preprocess()
 */

function user_alert_preprocess_user_alert(&$vars) {
  $node = $vars['node'];
  $vars['alert_label'] = variable_get('user_alert_label', 'User Alert');
  $format = !empty($node->format) ? $node->format : FILTER_FORMAT_DEFAULT;
  $vars['body'] = check_markup($node->body, $format, FALSE);
}

/**
 * Implements hook_cron
 * 
 * If User Alerts are configured to display for a period of time, unpublish them if the time has passed.
 */

function user_alert_cron() {
	$alert_timelimit = variable_get('user_alert_timelimit', 0);
	
	if ($alert_timelimit > 0) {
		$result = db_fetch_object(db_query('SELECT nid, created FROM {node} WHERE type = "%s" AND status = %d ORDER BY nid DESC LIMIT 1', 'user_alert', 1));
		
		if ((time() - $result->created) >= $alert_timelimit) {
			db_query('UPDATE {node} SET status = %d WHERE nid = %d AND type = "%s"', 0, $result->nid, 'user_alert');
			watchdog('user_alert', 'Node @nid unpublished, alert timelimit has passed.', array('@nid'=> $result->nid), WATCHDOG_NOTICE);
		}
	}
}

/**
 * Check that a string appears to be in the format of a UUID.
 *
 * @param $uuid
 *  The string to test.
 *
 * @return
 *   TRUE if the string is well formed.
 */

function _user_alert_uuid_is_valid($uuid) {
  return preg_match("/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/", $uuid);
}

/**
 * Generates a UUID v4 using PHP code.
 *
 * @see http://php.net/uniqid#65879
 */
function _user_alert_uuid_generate_php() {
  // The field names refer to RFC 4122 section 4.1.2.
  return sprintf('%04x%04x-%04x-%03x4-%04x-%04x%04x%04x',
    // 32 bits for "time_low".
    mt_rand(0, 65535), mt_rand(0, 65535),
    // 16 bits for "time_mid".
    mt_rand(0, 65535),
    // 12 bits before the 0100 of (version) 4 for "time_hi_and_version".
    mt_rand(0, 4095),
    bindec(substr_replace(sprintf('%016b', mt_rand(0, 65535)), '01', 6, 2)),
    // 8 bits, the last two of which (positions 6 and 7) are 01, for "clk_seq_hi_res"
    // (hence, the 2nd hex digit after the 3rd hyphen can only be 1, 5, 9 or d)
    // 8 bits for "clk_seq_low" 48 bits for "node".
    mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535)
  );
}